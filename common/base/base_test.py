import os
import pytest
import socket
import inspect
from dotenv import load_dotenv
from common.utils.logs.logger import setup_logger
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.edge.options import Options as EdgeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from common.utils.screenshots.screenshot_utils import take_screenshot

load_dotenv()
logger = setup_logger(__name__)
BASE_URL = os.getenv("ORANGEHRM_URL")

class BaseTest:
    
    @pytest.fixture(autouse=True)
    def setup_driver(self, request):
        """Setup WebDriver for Selenium Grid with configured browser and environment."""
        """Thi·∫øt l·∫≠p WebDriver cho Selenium Grid v·ªõi tr√¨nh duy·ªát v√† m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh."""
        
        browser = os.getenv("BROWSER", "chrome")
        
        environment = os.getenv("ENVIRONMENT", "local")
        
        grid_url = "http://selenium-hub:4444/wd/hub" if environment != "local" else "http://localhost:4444/wd/hub"
        wait_timeout = int(os.getenv("WAIT_TIMEOUT", "10"))
        
        self.browser_name = browser
        self.screenshot_dir = os.getenv("SCREENSHOT_DIR", "screenshots")
        
        # T·∫°o options t∆∞∆°ng ·ª©ng v·ªõi browser (Chrome / Edge / Firefox)
        options = self._get_browser_options(browser)
        logger.info(f"üîß Kh·ªüi t·∫°o WebDriver [{browser.upper()}] cho m√¥i tr∆∞·ªùng [{environment.upper()}]")
        
        # T·∫°o Remote WebDriver k·∫øt n·ªëi t·ªõi Selenium Grid
        self.driver = webdriver.Remote(
            command_executor=grid_url,
            options=options
        )
        
        # WebDriverWait gi√∫p ch·ªù c√°c element hi·ªáu qu·∫£
        self.wait = WebDriverWait(self.driver, wait_timeout)
        self.browser_name = browser
        self.base_url = os.getenv("ORANGEHRM_URL", "https://opensource-demo.orangehrmlive.com")
        # G√°n v√†o request.cls ƒë·ªÉ s·ª≠ d·ª•ng trong test class
        # if hasattr(request, "cls"):
        #     request.cls = self
        #     request.cls.driver = self.driver
        #     request.cls.wait = self.wait
        #     request.cls.base_url = BASE_URL

        if request.cls is not None:
            request.cls.driver = self.driver
            request.cls.wait = self.wait
            request.cls.base_url = os.getenv("ORANGEHRM_URL")
            request.cls.browser_name = self.browser_name
            request.cls.screenshot_dir = self.screenshot_dir
                    
        yield
        
        # N·∫øu test b·ªã fail ‚Üí ch·ª•p ·∫£nh m√†n h√¨nh
        if hasattr(request.node, "rep_call") and request.node.rep_call.failed:
            try:
                take_screenshot(self.driver, request.node.name, "fail", self.browser_name)
            except Exception as e:
                print(f"[‚ö†Ô∏è] Kh√¥ng th·ªÉ ch·ª•p screenshot: {e}")
        # ƒê√≥ng browser sau khi ch·∫°y xong test
        self.driver.quit()
        
    
    def _get_browser_options(self, browser):
        """T·∫°o browser options ph√π h·ª£p v·ªõi t·ª´ng tr√¨nh duy·ªát (Chrome, Edge, Firefox)"""
        # ƒê·ªçc bi·∫øn HEADLESS t·ª´ m√¥i tr∆∞·ªùng ƒë·ªÉ bi·∫øt c√≥ c·∫ßn ch·∫°y kh√¥ng giao di·ªán
        headless_env = os.getenv("HEADLESS", "false").lower()  == "true" or not os.getenv("DISPLAY")
        
        hostname = socket.gethostname()

        if hostname.startswith("selenium"):
            headless_env = True
        
        # T·∫°o options t∆∞∆°ng ·ª©ng v·ªõi tr√¨nh duy·ªát
        if browser == "chrome":
            options = ChromeOptions()
        elif browser == "edge":
            options = EdgeOptions()
        elif browser == "firefox":
            options = FirefoxOptions()
        else:
            raise ValueError(f"‚ùå Tr√¨nh duy·ªát kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {browser}")
        
        # C√°c c·∫•u h√¨nh chung cho m·ªçi tr√¨nh duy·ªát
        options.add_argument("--start-maximized")            # Ph√≥ng to m√†n h√¨nh
        options.add_argument("--disable-gpu")                # Tr√°nh l·ªói ƒë·ªì h·ªça trong m√¥i tr∆∞·ªùng CI
        options.add_argument("--no-sandbox")                 # B·∫Øt bu·ªôc khi ch·∫°y trong Docker
        options.add_argument("--disable-dev-shm-usage")      # Tr√°nh l·ªói b·ªô nh·ªõ chia s  ·∫ª th·∫•p trong Docker
        
        # Ch·ªëng b·ªã detect automation (ch·ªâ √°p d·ª•ng cho Chrome & Edge)
        if browser in ["chrome", "edge"]:
            options.add_argument("--disable-infobars")       # X√≥a thanh automation warning
            options.add_argument("--disable-extensions")     # T·∫Øt t·∫•t c·∫£ extension
            options.add_argument("--disable-blink-features=AutomationControlled")  # NgƒÉn JS detect webdriver
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option("useAutomationExtension", False)
            options.add_argument(
                "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/90.0.4430.93 Safari/537.36"
            )
            
        if headless_env:
            if browser == "chrome":
                options.add_argument("--headless=new")
                options.add_argument("--window-size=1920,1080")
            elif browser == "edge":
                options.add_argument("--headless=new")
                options.add_argument("--window-size=1920,1080")
            elif browser == "firefox":
                options.add_argument("--headless")
        
        return options
    
    def capture_screenshot(self, status: str):
        """T·ª± ƒë·ªông ch·ª•p screenshot cho test case hi·ªán t·∫°i v·ªõi tr·∫°ng th√°i passed/failed/assert"""
        test_case_name = inspect.currentframe().f_back.f_code.co_name
        take_screenshot(self.driver, test_case_name, status, self.browser_name)